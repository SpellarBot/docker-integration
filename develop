#!/usr/bin/env bash

GREEN='\033[00;32m' YELLOW='\033[11;33m' NORMAL='\033[0m' RED='\033[0;31m'

# If $CI_COMMIT_SHA is set, the file is ran from GitLab (9.x)
if [ ! -z "$CI_COMMIT_SHA" ]; then

    # Use ci file for ci development
    COMPOSE_FILE="ci"

    # Enable pseudo-TTY allocation for CI (GitLab)
    TTY="-T"

    # Custom project name $CI_PROJECT_NAME_$CI_COMMIT_REF_NAME_$CI_COMMIT_SHA to run containers on multiple times at once.
    export COMPOSE_PROJECT_NAME=${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}

else

    # Disable pseudo-TTY allocation for CI (GitLab)
    TTY=""

    # Use dev file for local development
    COMPOSE_FILE="dev"

    # Set paths for Windows
    if [ $1 != 'share' ]; then
        export COMPOSE_CONVERT_WINDOWS_PATHS=1
        export MSYS_NO_PATHCONV=1
    fi

fi

console() {
    compose run --rm $TTY php bin/console "$@"
}

composer() {
    compose run --rm $TTY "-e COMPOSER_CACHE_DIR=/composer_cache" php composer "$@"
}

php() {
    compose run --rm $TTY php php "$@"
}

test() {
    compose run --rm $TTY php ./vendor/bin/phpunit "$@"
}

yarn() {
    compose run --rm $TTY "-e YARN_CACHE_FOLDER=/yarn_cache" node yarn "$@"
}

start() {
    compose "up" "-d" "--remove-orphans"
    composer "install"
#    yarn "install" "--no-bin-links"
#    yarn "build-dev"
    console "doctrine:migrations:migrate" "-n"
    console "doctrine:fixtures:load" "-n"
    compose "logs" "--follow"
}

stop() {
	compose down
}

clean() {
    stop
	compose rm  -v --force
}

reset() {
    stop
    start
}

execute() {
    compose run --rm "$TTY" "$1" /bin/bash
}

share() {
    log "Running browsersync"

    if [ ! "$(echo `npm list --depth 1 --global 'browser-sync' | grep 'browser-sync'`)" ]; then
        error "No browser-sync found, installing..."
        npm install -g browser-sync
    fi

    if [ $1 ]; then
        DOMAIN=$1
    else
        DOMAIN=app.$(echo `basename $PWD` | tr -d - | tr -d _ | tr '[:upper:]' '[:lower:]').docker
    fi

    run browser-sync start --proxy "$DOMAIN" --files "public/css/*.css" --files "public/js/*.js" --open "external" --tunnel=true
}

compose() {
    run "docker-compose -f docker-compose.$COMPOSE_FILE.yml" "$@"
}

run() {
    log $@
    $@
}

log() {
  echo -e "$YELLOW > $@ $NORMAL"
}

error() {
  echo ""
  echo -e "$RED >>> ERROR - $1$NORMAL"
}

help() {
  echo "-----------------------------------------------------------------------"
  echo "                      Available commands                              -"
  echo "-----------------------------------------------------------------------"
  echo -e -n "$GREEN"
  echo "    start               - Start your engines!"
  echo "    stop                - Stop your engines!"
  echo "    reset               - Reset your engines!"
  echo "    share <DOMAIN>      - Start BrowserSync"
  echo "    execute <SERVICE>   - Run bash in container"
  echo "    console <ARGS>      - Run the Symfony Console in Docker"
  echo "    composer <ARGS>     - Run Composer in Docker"
  echo "    php <ARGS>          - Run PHP in Docker"
  echo "    test <ARGS>         - Run tests in Docker"
  echo "    yarn <ARGS>         - Run Yarn in Docker"
  echo "    gulp <ARGS>         - Run Gulp in Docker"
  echo "    compose <ARGS>      - Run docker-compose command"
  echo -e -n "$NORMAL"
  echo "-----------------------------------------------------------------------"
}

if [ -z "$1" ]; then
    help
fi

$*