image: wearejust/docker-compose:1.1

stages:
  - build
  - distribute
  - deploy
  - cleanup

cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - vendor/
    - node_modules/

build:
  stage: build
  script:
    - sh develop composer install --no-scripts
    - sh develop yarn install

distribute:
  stage: distribute
  script:
    - sh develop composer install --no-scripts
    - sh develop yarn install
    - mkdir -p dist
    - git archive --format=tar --worktree-attributes $(git rev-parse HEAD) | tar -xf -  -C dist
    - mv node_modules vendor dist/
    - cd dist
    - sh develop composer install --no-dev --no-scripts --prefer-dist --optimize-autoloader --no-progress --no-interaction
    - sh develop yarn build-prod
    - rm -rf node_modules docker* composer.json package.json
    - tar -C . -zcf ../artifact.tar.gz .
  artifacts:
    expire_in: 1 week
    paths:
      - artifact.tar.gz
  only:
    - staging
    - master

deploy_to_staging:
  stage: deploy
  allow_failure: false
  script:
    - sh develop composer install --prefer-dist --no-progress --no-interaction --no-scripts
    - sh develop php vendor/bin/dep deploy:unlock staging
    - sh develop php vendor/bin/dep deploy staging -vv --dist=artifact.tar.gz
  environment:
    name: staging
    url: http://XXX.com
  only:
    - staging
  when: on_success
  artifacts:
    expire_in: 1 day
    paths:
      - var/backups

deploy_to_production:
  stage: deploy
  allow_failure: false
  script:
    - sh develop composer install --prefer-dist --no-progress --no-interaction --no-scripts
    - sh develop php vendor/bin/dep deploy:unlock production
    - sh develop php vendor/bin/dep deploy production -vv --dist=artifact.tar.gz
  environment:
    name: production
    url: http://XXX.nl
  when: manual
  only:
    - master
  artifacts:
    expire_in: 1 day
    paths:
      - var/backups

cleanup:
  stage: cleanup
  script:
    - sh develop clean
  when: always
